// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: compact_formats.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializecompactOrchardAction")
public inline fun compactOrchardAction(block: cash.z.wallet.sdk.internal.rpc.CompactOrchardActionKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction =
  cash.z.wallet.sdk.internal.rpc.CompactOrchardActionKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.newBuilder()).apply { block() }._build()
/**
 * ```
 * https://github.com/zcash/zips/blob/main/zip-0225.rst#orchard-action-description-orchardaction
 * (but not all fields are needed)
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.CompactOrchardAction`
 */
public object CompactOrchardActionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction = _builder.build()

    /**
     * <pre>
     * [32] The nullifier of the input note
     * </pre>
     *
     * <code>bytes nullifier = 1;</code>
     */
    public var nullifier: com.google.protobuf.ByteString
      @JvmName("getNullifier")
      get() = _builder.getNullifier()
      @JvmName("setNullifier")
      set(value) {
        _builder.setNullifier(value)
      }
    /**
     * ```
     * [32] The nullifier of the input note
     * ```
     *
     * `bytes nullifier = 1;`
     */
    public fun clearNullifier() {
      _builder.clearNullifier()
    }

    /**
     * <pre>
     * [32] The x-coordinate of the note commitment for the output note
     * </pre>
     *
     * <code>bytes cmx = 2;</code>
     */
    public var cmx: com.google.protobuf.ByteString
      @JvmName("getCmx")
      get() = _builder.getCmx()
      @JvmName("setCmx")
      set(value) {
        _builder.setCmx(value)
      }
    /**
     * ```
     * [32] The x-coordinate of the note commitment for the output note
     * ```
     *
     * `bytes cmx = 2;`
     */
    public fun clearCmx() {
      _builder.clearCmx()
    }

    /**
     * <pre>
     * [32] An encoding of an ephemeral Pallas public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 3;</code>
     */
    public var ephemeralKey: com.google.protobuf.ByteString
      @JvmName("getEphemeralKey")
      get() = _builder.getEphemeralKey()
      @JvmName("setEphemeralKey")
      set(value) {
        _builder.setEphemeralKey(value)
      }
    /**
     * ```
     * [32] An encoding of an ephemeral Pallas public key
     * ```
     *
     * `bytes ephemeralKey = 3;`
     */
    public fun clearEphemeralKey() {
      _builder.clearEphemeralKey()
    }

    /**
     * <pre>
     * [52] The first 52 bytes of the encCiphertext field
     * </pre>
     *
     * <code>bytes ciphertext = 4;</code>
     */
    public var ciphertext: com.google.protobuf.ByteString
      @JvmName("getCiphertext")
      get() = _builder.getCiphertext()
      @JvmName("setCiphertext")
      set(value) {
        _builder.setCiphertext(value)
      }
    /**
     * ```
     * [52] The first 52 bytes of the encCiphertext field
     * ```
     *
     * `bytes ciphertext = 4;`
     */
    public fun clearCiphertext() {
      _builder.clearCiphertext()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.copy(block: `cash.z.wallet.sdk.internal.rpc`.CompactOrchardActionKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction =
  `cash.z.wallet.sdk.internal.rpc`.CompactOrchardActionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

