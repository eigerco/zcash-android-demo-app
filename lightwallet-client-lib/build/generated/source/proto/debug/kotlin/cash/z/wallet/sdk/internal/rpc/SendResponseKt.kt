// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: service.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializesendResponse")
public inline fun sendResponse(block: cash.z.wallet.sdk.internal.rpc.SendResponseKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.SendResponse =
  cash.z.wallet.sdk.internal.rpc.SendResponseKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.Service.SendResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * A SendResponse encodes an error code and a string. It is currently used
 * only by SendTransaction(). If error code is zero, the operation was
 * successful; if non-zero, it and the message specify the failure.
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.SendResponse`
 */
public object SendResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.Service.SendResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.Service.SendResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.Service.SendResponse = _builder.build()

    /**
     * <code>int32 errorCode = 1;</code>
     */
    public var errorCode: kotlin.Int
      @JvmName("getErrorCode")
      get() = _builder.getErrorCode()
      @JvmName("setErrorCode")
      set(value) {
        _builder.setErrorCode(value)
      }
    /**
     * `int32 errorCode = 1;`
     */
    public fun clearErrorCode() {
      _builder.clearErrorCode()
    }

    /**
     * `string errorMessage = 2;`
     */
    public var errorMessage: kotlin.String
      @JvmName("getErrorMessage")
      get() = _builder.getErrorMessage()
      @JvmName("setErrorMessage")
      set(value) {
        _builder.setErrorMessage(value)
      }
    /**
     * `string errorMessage = 2;`
     */
    public fun clearErrorMessage() {
      _builder.clearErrorMessage()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.Service.SendResponse.copy(block: `cash.z.wallet.sdk.internal.rpc`.SendResponseKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.SendResponse =
  `cash.z.wallet.sdk.internal.rpc`.SendResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

