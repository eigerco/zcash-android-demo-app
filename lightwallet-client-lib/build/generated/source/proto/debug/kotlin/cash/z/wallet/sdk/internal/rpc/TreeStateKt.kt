// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: service.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializetreeState")
public inline fun treeState(block: cash.z.wallet.sdk.internal.rpc.TreeStateKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.TreeState =
  cash.z.wallet.sdk.internal.rpc.TreeStateKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.Service.TreeState.newBuilder()).apply { block() }._build()
/**
 * ```
 * The TreeState is derived from the Zcash z_gettreestate rpc.
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.TreeState`
 */
public object TreeStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.Service.TreeState.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.Service.TreeState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.Service.TreeState = _builder.build()

    /**
     * ```
     * "main" or "test"
     * ```
     *
     * `string network = 1;`
     */
    public var network: kotlin.String
      @JvmName("getNetwork")
      get() = _builder.getNetwork()
      @JvmName("setNetwork")
      set(value) {
        _builder.setNetwork(value)
      }
    /**
     * ```
     * "main" or "test"
     * ```
     *
     * `string network = 1;`
     */
    public fun clearNetwork() {
      _builder.clearNetwork()
    }

    /**
     * <pre>
     * block height
     * </pre>
     *
     * <code>uint64 height = 2;</code>
     */
    public var height: kotlin.Long
      @JvmName("getHeight")
      get() = _builder.getHeight()
      @JvmName("setHeight")
      set(value) {
        _builder.setHeight(value)
      }
    /**
     * ```
     * block height
     * ```
     *
     * `uint64 height = 2;`
     */
    public fun clearHeight() {
      _builder.clearHeight()
    }

    /**
     * ```
     * block id
     * ```
     *
     * `string hash = 3;`
     */
    public var hash: kotlin.String
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * ```
     * block id
     * ```
     *
     * `string hash = 3;`
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * <pre>
     * Unix epoch time when the block was mined
     * </pre>
     *
     * <code>uint32 time = 4;</code>
     */
    public var time: kotlin.Int
      @JvmName("getTime")
      get() = _builder.getTime()
      @JvmName("setTime")
      set(value) {
        _builder.setTime(value)
      }
    /**
     * ```
     * Unix epoch time when the block was mined
     * ```
     *
     * `uint32 time = 4;`
     */
    public fun clearTime() {
      _builder.clearTime()
    }

    /**
     * ```
     * sapling commitment tree state
     * ```
     *
     * `string saplingTree = 5;`
     */
    public var saplingTree: kotlin.String
      @JvmName("getSaplingTree")
      get() = _builder.getSaplingTree()
      @JvmName("setSaplingTree")
      set(value) {
        _builder.setSaplingTree(value)
      }
    /**
     * ```
     * sapling commitment tree state
     * ```
     *
     * `string saplingTree = 5;`
     */
    public fun clearSaplingTree() {
      _builder.clearSaplingTree()
    }

    /**
     * ```
     * orchard commitment tree state
     * ```
     *
     * `string orchardTree = 6;`
     */
    public var orchardTree: kotlin.String
      @JvmName("getOrchardTree")
      get() = _builder.getOrchardTree()
      @JvmName("setOrchardTree")
      set(value) {
        _builder.setOrchardTree(value)
      }
    /**
     * ```
     * orchard commitment tree state
     * ```
     *
     * `string orchardTree = 6;`
     */
    public fun clearOrchardTree() {
      _builder.clearOrchardTree()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.Service.TreeState.copy(block: `cash.z.wallet.sdk.internal.rpc`.TreeStateKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.TreeState =
  `cash.z.wallet.sdk.internal.rpc`.TreeStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

