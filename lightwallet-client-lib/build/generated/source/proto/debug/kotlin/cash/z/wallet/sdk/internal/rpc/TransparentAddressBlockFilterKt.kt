// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: service.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializetransparentAddressBlockFilter")
public inline fun transparentAddressBlockFilter(block: cash.z.wallet.sdk.internal.rpc.TransparentAddressBlockFilterKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter =
  cash.z.wallet.sdk.internal.rpc.TransparentAddressBlockFilterKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter.newBuilder()).apply { block() }._build()
/**
 * ```
 * TransparentAddressBlockFilter restricts the results to the given address
 * or block range.
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter`
 */
public object TransparentAddressBlockFilterKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter = _builder.build()

    /**
     * ```
     * t-address
     * ```
     *
     * `string address = 1;`
     */
    public var address: kotlin.String
      @JvmName("getAddress")
      get() = _builder.getAddress()
      @JvmName("setAddress")
      set(value) {
        _builder.setAddress(value)
      }
    /**
     * ```
     * t-address
     * ```
     *
     * `string address = 1;`
     */
    public fun clearAddress() {
      _builder.clearAddress()
    }

    /**
     * ```
     * start, end heights
     * ```
     *
     * `.cash.z.wallet.sdk.rpc.BlockRange range = 2;`
     */
    public var range: cash.z.wallet.sdk.internal.rpc.Service.BlockRange
      @JvmName("getRange")
      get() = _builder.getRange()
      @JvmName("setRange")
      set(value) {
        _builder.setRange(value)
      }
    /**
     * ```
     * start, end heights
     * ```
     *
     * `.cash.z.wallet.sdk.rpc.BlockRange range = 2;`
     */
    public fun clearRange() {
      _builder.clearRange()
    }
    /**
     * ```
     * start, end heights
     * ```
     *
     * `.cash.z.wallet.sdk.rpc.BlockRange range = 2;`
     * @return Whether the range field is set.
     */
    public fun hasRange(): kotlin.Boolean {
      return _builder.hasRange()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter.copy(block: `cash.z.wallet.sdk.internal.rpc`.TransparentAddressBlockFilterKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilter =
  `cash.z.wallet.sdk.internal.rpc`.TransparentAddressBlockFilterKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cash.z.wallet.sdk.internal.rpc.Service.TransparentAddressBlockFilterOrBuilder.rangeOrNull: cash.z.wallet.sdk.internal.rpc.Service.BlockRange?
  get() = if (hasRange()) getRange() else null

