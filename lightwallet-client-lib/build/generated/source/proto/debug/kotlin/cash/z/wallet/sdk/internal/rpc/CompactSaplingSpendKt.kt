// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: compact_formats.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializecompactSaplingSpend")
public inline fun compactSaplingSpend(block: cash.z.wallet.sdk.internal.rpc.CompactSaplingSpendKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend =
  cash.z.wallet.sdk.internal.rpc.CompactSaplingSpendKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.newBuilder()).apply { block() }._build()
/**
 * ```
 * CompactSaplingSpend is a Sapling Spend Description as described in 7.3 of the Zcash
 * protocol specification.
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.CompactSaplingSpend`
 */
public object CompactSaplingSpendKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend = _builder.build()

    /**
     * <pre>
     * nullifier (see the Zcash protocol specification)
     * </pre>
     *
     * <code>bytes nf = 1;</code>
     */
    public var nf: com.google.protobuf.ByteString
      @JvmName("getNf")
      get() = _builder.getNf()
      @JvmName("setNf")
      set(value) {
        _builder.setNf(value)
      }
    /**
     * ```
     * nullifier (see the Zcash protocol specification)
     * ```
     *
     * `bytes nf = 1;`
     */
    public fun clearNf() {
      _builder.clearNf()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.copy(block: `cash.z.wallet.sdk.internal.rpc`.CompactSaplingSpendKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend =
  `cash.z.wallet.sdk.internal.rpc`.CompactSaplingSpendKt.Dsl._create(this.toBuilder()).apply { block() }._build()

