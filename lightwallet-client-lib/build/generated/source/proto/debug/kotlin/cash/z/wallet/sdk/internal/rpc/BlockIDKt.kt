// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: service.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializeblockID")
public inline fun blockID(block: cash.z.wallet.sdk.internal.rpc.BlockIDKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.BlockID =
  cash.z.wallet.sdk.internal.rpc.BlockIDKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.Service.BlockID.newBuilder()).apply { block() }._build()
/**
 * ```
 * A BlockID message contains identifiers to select a block: a height or a
 * hash. Specification by hash is not implemented, but may be in the future.
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.BlockID`
 */
public object BlockIDKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.Service.BlockID.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.Service.BlockID.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.Service.BlockID = _builder.build()

    /**
     * <code>uint64 height = 1;</code>
     */
    public var height: kotlin.Long
      @JvmName("getHeight")
      get() = _builder.getHeight()
      @JvmName("setHeight")
      set(value) {
        _builder.setHeight(value)
      }
    /**
     * `uint64 height = 1;`
     */
    public fun clearHeight() {
      _builder.clearHeight()
    }

    /**
     * <code>bytes hash = 2;</code>
     */
    public var hash: com.google.protobuf.ByteString
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * `bytes hash = 2;`
     */
    public fun clearHash() {
      _builder.clearHash()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.Service.BlockID.copy(block: `cash.z.wallet.sdk.internal.rpc`.BlockIDKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.Service.BlockID =
  `cash.z.wallet.sdk.internal.rpc`.BlockIDKt.Dsl._create(this.toBuilder()).apply { block() }._build()

