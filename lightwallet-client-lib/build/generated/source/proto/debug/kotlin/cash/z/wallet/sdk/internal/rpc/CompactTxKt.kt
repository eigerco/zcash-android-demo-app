// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: compact_formats.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cash.z.wallet.sdk.internal.rpc;

@kotlin.jvm.JvmName("-initializecompactTx")
public inline fun compactTx(block: cash.z.wallet.sdk.internal.rpc.CompactTxKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx =
  cash.z.wallet.sdk.internal.rpc.CompactTxKt.Dsl._create(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.newBuilder()).apply { block() }._build()
/**
 * ```
 * CompactTx contains the minimum information for a wallet to know if this transaction
 * is relevant to it (either pays to it or spends from it) via shielded elements
 * only. This message will not encode a transparent-to-transparent transaction.
 * ```
 *
 * Protobuf type `cash.z.wallet.sdk.rpc.CompactTx`
 */
public object CompactTxKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx = _builder.build()

    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>uint64 index = 1;</code>
     */
    public var index: kotlin.Long
      @JvmName("getIndex")
      get() = _builder.getIndex()
      @JvmName("setIndex")
      set(value) {
        _builder.setIndex(value)
      }
    /**
     * ```
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * ```
     *
     * `uint64 index = 1;`
     */
    public fun clearIndex() {
      _builder.clearIndex()
    }

    /**
     * <pre>
     * the ID (hash) of this transaction, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 2;</code>
     */
    public var hash: com.google.protobuf.ByteString
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * ```
     * the ID (hash) of this transaction, same as in block explorers
     * ```
     *
     * `bytes hash = 2;`
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * If there are no transparent inputs, the fee will be calculable as:
     *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
     * </pre>
     *
     * <code>uint32 fee = 3;</code>
     */
    public var fee: kotlin.Int
      @JvmName("getFee")
      get() = _builder.getFee()
      @JvmName("setFee")
      set(value) {
        _builder.setFee(value)
      }
    /**
     * ```
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * If there are no transparent inputs, the fee will be calculable as:
     *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
     * ```
     *
     * `uint32 fee = 3;`
     */
    public fun clearFee() {
      _builder.clearFee()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SpendsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     */
     public val spends: com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSpendsList()
      )
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     * @param value The spends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSpends")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>.add(value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend) {
      _builder.addSpends(value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     * @param value The spends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSpends")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>.plusAssign(value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend) {
      add(value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     * @param values The spends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSpends")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>.addAll(values: kotlin.collections.Iterable<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend>) {
      _builder.addAllSpends(values)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     * @param values The spends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSpends")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>.plusAssign(values: kotlin.collections.Iterable<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend>) {
      addAll(values)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     * @param index The index to set the value at.
     * @param value The spends to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSpends")
    public operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>.set(index: kotlin.Int, value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend) {
      _builder.setSpends(index, value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSpends")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, SpendsProxy>.clear() {
      _builder.clearSpends()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class OutputsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     */
     public val outputs: com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getOutputsList()
      )
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     * @param value The outputs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addOutputs")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>.add(value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput) {
      _builder.addOutputs(value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     * @param value The outputs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignOutputs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>.plusAssign(value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput) {
      add(value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     * @param values The outputs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllOutputs")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>.addAll(values: kotlin.collections.Iterable<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput>) {
      _builder.addAllOutputs(values)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     * @param values The outputs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllOutputs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>.plusAssign(values: kotlin.collections.Iterable<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput>) {
      addAll(values)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     * @param index The index to set the value at.
     * @param value The outputs to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setOutputs")
    public operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>.set(index: kotlin.Int, value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput) {
      _builder.setOutputs(index, value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearOutputs")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, OutputsProxy>.clear() {
      _builder.clearOutputs()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ActionsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     */
     public val actions: com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getActionsList()
      )
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     * @param value The actions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addActions")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>.add(value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction) {
      _builder.addActions(value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     * @param value The actions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignActions")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>.plusAssign(value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction) {
      add(value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     * @param values The actions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllActions")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>.addAll(values: kotlin.collections.Iterable<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction>) {
      _builder.addAllActions(values)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     * @param values The actions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllActions")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>.plusAssign(values: kotlin.collections.Iterable<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction>) {
      addAll(values)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     * @param index The index to set the value at.
     * @param value The actions to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setActions")
    public operator fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>.set(index: kotlin.Int, value: cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction) {
      _builder.setActions(index, value)
    }
    /**
     * `repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearActions")
    public fun com.google.protobuf.kotlin.DslList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, ActionsProxy>.clear() {
      _builder.clearActions()
    }
  }
}
public inline fun cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.copy(block: `cash.z.wallet.sdk.internal.rpc`.CompactTxKt.Dsl.() -> kotlin.Unit): cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx =
  `cash.z.wallet.sdk.internal.rpc`.CompactTxKt.Dsl._create(this.toBuilder()).apply { block() }._build()

