// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compact_formats.proto

// Protobuf Java Version: 3.25.0
package cash.z.wallet.sdk.internal.rpc;

public final class CompactFormats {
  private CompactFormats() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ChainMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cash.z.wallet.sdk.rpc.ChainMetadata)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * the size of the Sapling note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 saplingCommitmentTreeSize = 1;</code>
     * @return The saplingCommitmentTreeSize.
     */
    int getSaplingCommitmentTreeSize();

    /**
     * <pre>
     * the size of the Orchard note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 orchardCommitmentTreeSize = 2;</code>
     * @return The orchardCommitmentTreeSize.
     */
    int getOrchardCommitmentTreeSize();
  }
  /**
   * <pre>
   * ChainMetadata represents information about the state of the chain as of a given block.
   * </pre>
   *
   * Protobuf type {@code cash.z.wallet.sdk.rpc.ChainMetadata}
   */
  public  static final class ChainMetadata extends
      com.google.protobuf.GeneratedMessageLite<
          ChainMetadata, ChainMetadata.Builder> implements
      // @@protoc_insertion_point(message_implements:cash.z.wallet.sdk.rpc.ChainMetadata)
      ChainMetadataOrBuilder {
    private ChainMetadata() {
    }
    public static final int SAPLINGCOMMITMENTTREESIZE_FIELD_NUMBER = 1;
    private int saplingCommitmentTreeSize_;
    /**
     * <pre>
     * the size of the Sapling note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 saplingCommitmentTreeSize = 1;</code>
     * @return The saplingCommitmentTreeSize.
     */
    @java.lang.Override
    public int getSaplingCommitmentTreeSize() {
      return saplingCommitmentTreeSize_;
    }
    /**
     * <pre>
     * the size of the Sapling note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 saplingCommitmentTreeSize = 1;</code>
     * @param value The saplingCommitmentTreeSize to set.
     */
    private void setSaplingCommitmentTreeSize(int value) {
      
      saplingCommitmentTreeSize_ = value;
    }
    /**
     * <pre>
     * the size of the Sapling note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 saplingCommitmentTreeSize = 1;</code>
     */
    private void clearSaplingCommitmentTreeSize() {

      saplingCommitmentTreeSize_ = 0;
    }

    public static final int ORCHARDCOMMITMENTTREESIZE_FIELD_NUMBER = 2;
    private int orchardCommitmentTreeSize_;
    /**
     * <pre>
     * the size of the Orchard note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 orchardCommitmentTreeSize = 2;</code>
     * @return The orchardCommitmentTreeSize.
     */
    @java.lang.Override
    public int getOrchardCommitmentTreeSize() {
      return orchardCommitmentTreeSize_;
    }
    /**
     * <pre>
     * the size of the Orchard note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 orchardCommitmentTreeSize = 2;</code>
     * @param value The orchardCommitmentTreeSize to set.
     */
    private void setOrchardCommitmentTreeSize(int value) {
      
      orchardCommitmentTreeSize_ = value;
    }
    /**
     * <pre>
     * the size of the Orchard note commitment tree as of the end of this block
     * </pre>
     *
     * <code>uint32 orchardCommitmentTreeSize = 2;</code>
     */
    private void clearOrchardCommitmentTreeSize() {

      orchardCommitmentTreeSize_ = 0;
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * ChainMetadata represents information about the state of the chain as of a given block.
     * </pre>
     *
     * Protobuf type {@code cash.z.wallet.sdk.rpc.ChainMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata, Builder> implements
        // @@protoc_insertion_point(builder_implements:cash.z.wallet.sdk.rpc.ChainMetadata)
        cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadataOrBuilder {
      // Construct using cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * the size of the Sapling note commitment tree as of the end of this block
       * </pre>
       *
       * <code>uint32 saplingCommitmentTreeSize = 1;</code>
       * @return The saplingCommitmentTreeSize.
       */
      @java.lang.Override
      public int getSaplingCommitmentTreeSize() {
        return instance.getSaplingCommitmentTreeSize();
      }
      /**
       * <pre>
       * the size of the Sapling note commitment tree as of the end of this block
       * </pre>
       *
       * <code>uint32 saplingCommitmentTreeSize = 1;</code>
       * @param value The saplingCommitmentTreeSize to set.
       * @return This builder for chaining.
       */
      public Builder setSaplingCommitmentTreeSize(int value) {
        copyOnWrite();
        instance.setSaplingCommitmentTreeSize(value);
        return this;
      }
      /**
       * <pre>
       * the size of the Sapling note commitment tree as of the end of this block
       * </pre>
       *
       * <code>uint32 saplingCommitmentTreeSize = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSaplingCommitmentTreeSize() {
        copyOnWrite();
        instance.clearSaplingCommitmentTreeSize();
        return this;
      }

      /**
       * <pre>
       * the size of the Orchard note commitment tree as of the end of this block
       * </pre>
       *
       * <code>uint32 orchardCommitmentTreeSize = 2;</code>
       * @return The orchardCommitmentTreeSize.
       */
      @java.lang.Override
      public int getOrchardCommitmentTreeSize() {
        return instance.getOrchardCommitmentTreeSize();
      }
      /**
       * <pre>
       * the size of the Orchard note commitment tree as of the end of this block
       * </pre>
       *
       * <code>uint32 orchardCommitmentTreeSize = 2;</code>
       * @param value The orchardCommitmentTreeSize to set.
       * @return This builder for chaining.
       */
      public Builder setOrchardCommitmentTreeSize(int value) {
        copyOnWrite();
        instance.setOrchardCommitmentTreeSize(value);
        return this;
      }
      /**
       * <pre>
       * the size of the Orchard note commitment tree as of the end of this block
       * </pre>
       *
       * <code>uint32 orchardCommitmentTreeSize = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOrchardCommitmentTreeSize() {
        copyOnWrite();
        instance.clearOrchardCommitmentTreeSize();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cash.z.wallet.sdk.rpc.ChainMetadata)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "saplingCommitmentTreeSize_",
              "orchardCommitmentTreeSize_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u000b\u0002\u000b" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata> parser = PARSER;
          if (parser == null) {
            synchronized (cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cash.z.wallet.sdk.rpc.ChainMetadata)
    private static final cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata DEFAULT_INSTANCE;
    static {
      ChainMetadata defaultInstance = new ChainMetadata();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ChainMetadata.class, defaultInstance);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChainMetadata> PARSER;

    public static com.google.protobuf.Parser<ChainMetadata> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cash.z.wallet.sdk.rpc.CompactBlock)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>uint32 protoVersion = 1;</code>
     * @return The protoVersion.
     */
    int getProtoVersion();

    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>uint64 height = 2;</code>
     * @return The height.
     */
    long getHeight();

    /**
     * <pre>
     * the ID (hash) of this block, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 3;</code>
     * @return The hash.
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <pre>
     * the ID (hash) of this block's predecessor
     * </pre>
     *
     * <code>bytes prevHash = 4;</code>
     * @return The prevHash.
     */
    com.google.protobuf.ByteString getPrevHash();

    /**
     * <pre>
     * Unix epoch time when the block was mined
     * </pre>
     *
     * <code>uint32 time = 5;</code>
     * @return The time.
     */
    int getTime();

    /**
     * <pre>
     * (hash, prevHash, and time) OR (full header)
     * </pre>
     *
     * <code>bytes header = 6;</code>
     * @return The header.
     */
    com.google.protobuf.ByteString getHeader();

    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> 
        getVtxList();
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx getVtx(int index);
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    int getVtxCount();

    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     * @return Whether the chainMetadata field is set.
     */
    boolean hasChainMetadata();
    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     * @return The chainMetadata.
     */
    cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata getChainMetadata();
  }
  /**
   * <pre>
   * CompactBlock is a packaging of ONLY the data from a block that's needed to:
   *   1. Detect a payment to your shielded Sapling address
   *   2. Detect a spend of your shielded Sapling notes
   *   3. Update your witnesses to generate new Sapling spend proofs.
   * </pre>
   *
   * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactBlock}
   */
  public  static final class CompactBlock extends
      com.google.protobuf.GeneratedMessageLite<
          CompactBlock, CompactBlock.Builder> implements
      // @@protoc_insertion_point(message_implements:cash.z.wallet.sdk.rpc.CompactBlock)
      CompactBlockOrBuilder {
    private CompactBlock() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
      prevHash_ = com.google.protobuf.ByteString.EMPTY;
      header_ = com.google.protobuf.ByteString.EMPTY;
      vtx_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int PROTOVERSION_FIELD_NUMBER = 1;
    private int protoVersion_;
    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>uint32 protoVersion = 1;</code>
     * @return The protoVersion.
     */
    @java.lang.Override
    public int getProtoVersion() {
      return protoVersion_;
    }
    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>uint32 protoVersion = 1;</code>
     * @param value The protoVersion to set.
     */
    private void setProtoVersion(int value) {
      
      protoVersion_ = value;
    }
    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>uint32 protoVersion = 1;</code>
     */
    private void clearProtoVersion() {

      protoVersion_ = 0;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private long height_;
    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>uint64 height = 2;</code>
     * @return The height.
     */
    @java.lang.Override
    public long getHeight() {
      return height_;
    }
    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>uint64 height = 2;</code>
     * @param value The height to set.
     */
    private void setHeight(long value) {
      
      height_ = value;
    }
    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>uint64 height = 2;</code>
     */
    private void clearHeight() {

      height_ = 0L;
    }

    public static final int HASH_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString hash_;
    /**
     * <pre>
     * the ID (hash) of this block, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 3;</code>
     * @return The hash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }
    /**
     * <pre>
     * the ID (hash) of this block, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 3;</code>
     * @param value The hash to set.
     */
    private void setHash(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      hash_ = value;
    }
    /**
     * <pre>
     * the ID (hash) of this block, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 3;</code>
     */
    private void clearHash() {

      hash_ = getDefaultInstance().getHash();
    }

    public static final int PREVHASH_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString prevHash_;
    /**
     * <pre>
     * the ID (hash) of this block's predecessor
     * </pre>
     *
     * <code>bytes prevHash = 4;</code>
     * @return The prevHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrevHash() {
      return prevHash_;
    }
    /**
     * <pre>
     * the ID (hash) of this block's predecessor
     * </pre>
     *
     * <code>bytes prevHash = 4;</code>
     * @param value The prevHash to set.
     */
    private void setPrevHash(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      prevHash_ = value;
    }
    /**
     * <pre>
     * the ID (hash) of this block's predecessor
     * </pre>
     *
     * <code>bytes prevHash = 4;</code>
     */
    private void clearPrevHash() {

      prevHash_ = getDefaultInstance().getPrevHash();
    }

    public static final int TIME_FIELD_NUMBER = 5;
    private int time_;
    /**
     * <pre>
     * Unix epoch time when the block was mined
     * </pre>
     *
     * <code>uint32 time = 5;</code>
     * @return The time.
     */
    @java.lang.Override
    public int getTime() {
      return time_;
    }
    /**
     * <pre>
     * Unix epoch time when the block was mined
     * </pre>
     *
     * <code>uint32 time = 5;</code>
     * @param value The time to set.
     */
    private void setTime(int value) {
      
      time_ = value;
    }
    /**
     * <pre>
     * Unix epoch time when the block was mined
     * </pre>
     *
     * <code>uint32 time = 5;</code>
     */
    private void clearTime() {

      time_ = 0;
    }

    public static final int HEADER_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString header_;
    /**
     * <pre>
     * (hash, prevHash, and time) OR (full header)
     * </pre>
     *
     * <code>bytes header = 6;</code>
     * @return The header.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getHeader() {
      return header_;
    }
    /**
     * <pre>
     * (hash, prevHash, and time) OR (full header)
     * </pre>
     *
     * <code>bytes header = 6;</code>
     * @param value The header to set.
     */
    private void setHeader(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      header_ = value;
    }
    /**
     * <pre>
     * (hash, prevHash, and time) OR (full header)
     * </pre>
     *
     * <code>bytes header = 6;</code>
     */
    private void clearHeader() {

      header_ = getDefaultInstance().getHeader();
    }

    public static final int VTX_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> vtx_;
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    @java.lang.Override
    public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> getVtxList() {
      return vtx_;
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    public java.util.List<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTxOrBuilder> 
        getVtxOrBuilderList() {
      return vtx_;
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    @java.lang.Override
    public int getVtxCount() {
      return vtx_.size();
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    @java.lang.Override
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx getVtx(int index) {
      return vtx_.get(index);
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTxOrBuilder getVtxOrBuilder(
        int index) {
      return vtx_.get(index);
    }
    private void ensureVtxIsMutable() {
      com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> tmp = vtx_;
      if (!tmp.isModifiable()) {
        vtx_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    private void setVtx(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx value) {
      value.getClass();
  ensureVtxIsMutable();
      vtx_.set(index, value);
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    private void addVtx(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx value) {
      value.getClass();
  ensureVtxIsMutable();
      vtx_.add(value);
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    private void addVtx(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx value) {
      value.getClass();
  ensureVtxIsMutable();
      vtx_.add(index, value);
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    private void addAllVtx(
        java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> values) {
      ensureVtxIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, vtx_);
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    private void clearVtx() {
      vtx_ = emptyProtobufList();
    }
    /**
     * <pre>
     * zero or more compact transactions from this block
     * </pre>
     *
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
     */
    private void removeVtx(int index) {
      ensureVtxIsMutable();
      vtx_.remove(index);
    }

    public static final int CHAINMETADATA_FIELD_NUMBER = 8;
    private cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata chainMetadata_;
    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     */
    @java.lang.Override
    public boolean hasChainMetadata() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     */
    @java.lang.Override
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata getChainMetadata() {
      return chainMetadata_ == null ? cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata.getDefaultInstance() : chainMetadata_;
    }
    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     */
    private void setChainMetadata(cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata value) {
      value.getClass();
  chainMetadata_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeChainMetadata(cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata value) {
      value.getClass();
  if (chainMetadata_ != null &&
          chainMetadata_ != cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata.getDefaultInstance()) {
        chainMetadata_ =
          cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata.newBuilder(chainMetadata_).mergeFrom(value).buildPartial();
      } else {
        chainMetadata_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * information about the state of the chain as of this block
     * </pre>
     *
     * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
     */
    private void clearChainMetadata() {  chainMetadata_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * CompactBlock is a packaging of ONLY the data from a block that's needed to:
     *   1. Detect a payment to your shielded Sapling address
     *   2. Detect a spend of your shielded Sapling notes
     *   3. Update your witnesses to generate new Sapling spend proofs.
     * </pre>
     *
     * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactBlock}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock, Builder> implements
        // @@protoc_insertion_point(builder_implements:cash.z.wallet.sdk.rpc.CompactBlock)
        cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlockOrBuilder {
      // Construct using cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * the version of this wire format, for storage
       * </pre>
       *
       * <code>uint32 protoVersion = 1;</code>
       * @return The protoVersion.
       */
      @java.lang.Override
      public int getProtoVersion() {
        return instance.getProtoVersion();
      }
      /**
       * <pre>
       * the version of this wire format, for storage
       * </pre>
       *
       * <code>uint32 protoVersion = 1;</code>
       * @param value The protoVersion to set.
       * @return This builder for chaining.
       */
      public Builder setProtoVersion(int value) {
        copyOnWrite();
        instance.setProtoVersion(value);
        return this;
      }
      /**
       * <pre>
       * the version of this wire format, for storage
       * </pre>
       *
       * <code>uint32 protoVersion = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProtoVersion() {
        copyOnWrite();
        instance.clearProtoVersion();
        return this;
      }

      /**
       * <pre>
       * the height of this block
       * </pre>
       *
       * <code>uint64 height = 2;</code>
       * @return The height.
       */
      @java.lang.Override
      public long getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       * the height of this block
       * </pre>
       *
       * <code>uint64 height = 2;</code>
       * @param value The height to set.
       * @return This builder for chaining.
       */
      public Builder setHeight(long value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       * the height of this block
       * </pre>
       *
       * <code>uint64 height = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      /**
       * <pre>
       * the ID (hash) of this block, same as in block explorers
       * </pre>
       *
       * <code>bytes hash = 3;</code>
       * @return The hash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getHash() {
        return instance.getHash();
      }
      /**
       * <pre>
       * the ID (hash) of this block, same as in block explorers
       * </pre>
       *
       * <code>bytes hash = 3;</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHash(value);
        return this;
      }
      /**
       * <pre>
       * the ID (hash) of this block, same as in block explorers
       * </pre>
       *
       * <code>bytes hash = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        copyOnWrite();
        instance.clearHash();
        return this;
      }

      /**
       * <pre>
       * the ID (hash) of this block's predecessor
       * </pre>
       *
       * <code>bytes prevHash = 4;</code>
       * @return The prevHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrevHash() {
        return instance.getPrevHash();
      }
      /**
       * <pre>
       * the ID (hash) of this block's predecessor
       * </pre>
       *
       * <code>bytes prevHash = 4;</code>
       * @param value The prevHash to set.
       * @return This builder for chaining.
       */
      public Builder setPrevHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPrevHash(value);
        return this;
      }
      /**
       * <pre>
       * the ID (hash) of this block's predecessor
       * </pre>
       *
       * <code>bytes prevHash = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevHash() {
        copyOnWrite();
        instance.clearPrevHash();
        return this;
      }

      /**
       * <pre>
       * Unix epoch time when the block was mined
       * </pre>
       *
       * <code>uint32 time = 5;</code>
       * @return The time.
       */
      @java.lang.Override
      public int getTime() {
        return instance.getTime();
      }
      /**
       * <pre>
       * Unix epoch time when the block was mined
       * </pre>
       *
       * <code>uint32 time = 5;</code>
       * @param value The time to set.
       * @return This builder for chaining.
       */
      public Builder setTime(int value) {
        copyOnWrite();
        instance.setTime(value);
        return this;
      }
      /**
       * <pre>
       * Unix epoch time when the block was mined
       * </pre>
       *
       * <code>uint32 time = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTime() {
        copyOnWrite();
        instance.clearTime();
        return this;
      }

      /**
       * <pre>
       * (hash, prevHash, and time) OR (full header)
       * </pre>
       *
       * <code>bytes header = 6;</code>
       * @return The header.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getHeader() {
        return instance.getHeader();
      }
      /**
       * <pre>
       * (hash, prevHash, and time) OR (full header)
       * </pre>
       *
       * <code>bytes header = 6;</code>
       * @param value The header to set.
       * @return This builder for chaining.
       */
      public Builder setHeader(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHeader(value);
        return this;
      }
      /**
       * <pre>
       * (hash, prevHash, and time) OR (full header)
       * </pre>
       *
       * <code>bytes header = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeader() {
        copyOnWrite();
        instance.clearHeader();
        return this;
      }

      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      @java.lang.Override
      public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> getVtxList() {
        return java.util.Collections.unmodifiableList(
            instance.getVtxList());
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      @java.lang.Override
      public int getVtxCount() {
        return instance.getVtxCount();
      }/**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      @java.lang.Override
      public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx getVtx(int index) {
        return instance.getVtx(index);
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder setVtx(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx value) {
        copyOnWrite();
        instance.setVtx(index, value);
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder setVtx(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.Builder builderForValue) {
        copyOnWrite();
        instance.setVtx(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder addVtx(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx value) {
        copyOnWrite();
        instance.addVtx(value);
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder addVtx(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx value) {
        copyOnWrite();
        instance.addVtx(index, value);
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder addVtx(
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.Builder builderForValue) {
        copyOnWrite();
        instance.addVtx(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder addVtx(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.Builder builderForValue) {
        copyOnWrite();
        instance.addVtx(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder addAllVtx(
          java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> values) {
        copyOnWrite();
        instance.addAllVtx(values);
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder clearVtx() {
        copyOnWrite();
        instance.clearVtx();
        return this;
      }
      /**
       * <pre>
       * zero or more compact transactions from this block
       * </pre>
       *
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactTx vtx = 7;</code>
       */
      public Builder removeVtx(int index) {
        copyOnWrite();
        instance.removeVtx(index);
        return this;
      }

      /**
       * <pre>
       * information about the state of the chain as of this block
       * </pre>
       *
       * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
       */
      @java.lang.Override
      public boolean hasChainMetadata() {
        return instance.hasChainMetadata();
      }
      /**
       * <pre>
       * information about the state of the chain as of this block
       * </pre>
       *
       * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
       */
      @java.lang.Override
      public cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata getChainMetadata() {
        return instance.getChainMetadata();
      }
      /**
       * <pre>
       * information about the state of the chain as of this block
       * </pre>
       *
       * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
       */
      public Builder setChainMetadata(cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata value) {
        copyOnWrite();
        instance.setChainMetadata(value);
        return this;
        }
      /**
       * <pre>
       * information about the state of the chain as of this block
       * </pre>
       *
       * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
       */
      public Builder setChainMetadata(
          cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata.Builder builderForValue) {
        copyOnWrite();
        instance.setChainMetadata(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * information about the state of the chain as of this block
       * </pre>
       *
       * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
       */
      public Builder mergeChainMetadata(cash.z.wallet.sdk.internal.rpc.CompactFormats.ChainMetadata value) {
        copyOnWrite();
        instance.mergeChainMetadata(value);
        return this;
      }
      /**
       * <pre>
       * information about the state of the chain as of this block
       * </pre>
       *
       * <code>.cash.z.wallet.sdk.rpc.ChainMetadata chainMetadata = 8;</code>
       */
      public Builder clearChainMetadata() {  copyOnWrite();
        instance.clearChainMetadata();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cash.z.wallet.sdk.rpc.CompactBlock)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "protoVersion_",
              "height_",
              "hash_",
              "prevHash_",
              "time_",
              "header_",
              "vtx_",
              cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.class,
              "chainMetadata_",
            };
            java.lang.String info =
                "\u0000\b\u0000\u0001\u0001\b\b\u0000\u0001\u0000\u0001\u000b\u0002\u0003\u0003\n" +
                "\u0004\n\u0005\u000b\u0006\n\u0007\u001b\b\u1009\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock> parser = PARSER;
          if (parser == null) {
            synchronized (cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cash.z.wallet.sdk.rpc.CompactBlock)
    private static final cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock DEFAULT_INSTANCE;
    static {
      CompactBlock defaultInstance = new CompactBlock();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompactBlock.class, defaultInstance);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactBlock> PARSER;

    public static com.google.protobuf.Parser<CompactBlock> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactTxOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cash.z.wallet.sdk.rpc.CompactTx)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>uint64 index = 1;</code>
     * @return The index.
     */
    long getIndex();

    /**
     * <pre>
     * the ID (hash) of this transaction, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 2;</code>
     * @return The hash.
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * If there are no transparent inputs, the fee will be calculable as:
     *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
     * </pre>
     *
     * <code>uint32 fee = 3;</code>
     * @return The fee.
     */
    int getFee();

    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> 
        getSpendsList();
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend getSpends(int index);
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    int getSpendsCount();

    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> 
        getOutputsList();
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput getOutputs(int index);
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    int getOutputsCount();

    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> 
        getActionsList();
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction getActions(int index);
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    int getActionsCount();
  }
  /**
   * <pre>
   * CompactTx contains the minimum information for a wallet to know if this transaction
   * is relevant to it (either pays to it or spends from it) via shielded elements
   * only. This message will not encode a transparent-to-transparent transaction.
   * </pre>
   *
   * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactTx}
   */
  public  static final class CompactTx extends
      com.google.protobuf.GeneratedMessageLite<
          CompactTx, CompactTx.Builder> implements
      // @@protoc_insertion_point(message_implements:cash.z.wallet.sdk.rpc.CompactTx)
      CompactTxOrBuilder {
    private CompactTx() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
      spends_ = emptyProtobufList();
      outputs_ = emptyProtobufList();
      actions_ = emptyProtobufList();
    }
    public static final int INDEX_FIELD_NUMBER = 1;
    private long index_;
    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>uint64 index = 1;</code>
     * @return The index.
     */
    @java.lang.Override
    public long getIndex() {
      return index_;
    }
    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>uint64 index = 1;</code>
     * @param value The index to set.
     */
    private void setIndex(long value) {
      
      index_ = value;
    }
    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>uint64 index = 1;</code>
     */
    private void clearIndex() {

      index_ = 0L;
    }

    public static final int HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString hash_;
    /**
     * <pre>
     * the ID (hash) of this transaction, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 2;</code>
     * @return The hash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }
    /**
     * <pre>
     * the ID (hash) of this transaction, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 2;</code>
     * @param value The hash to set.
     */
    private void setHash(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      hash_ = value;
    }
    /**
     * <pre>
     * the ID (hash) of this transaction, same as in block explorers
     * </pre>
     *
     * <code>bytes hash = 2;</code>
     */
    private void clearHash() {

      hash_ = getDefaultInstance().getHash();
    }

    public static final int FEE_FIELD_NUMBER = 3;
    private int fee_;
    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * If there are no transparent inputs, the fee will be calculable as:
     *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
     * </pre>
     *
     * <code>uint32 fee = 3;</code>
     * @return The fee.
     */
    @java.lang.Override
    public int getFee() {
      return fee_;
    }
    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * If there are no transparent inputs, the fee will be calculable as:
     *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
     * </pre>
     *
     * <code>uint32 fee = 3;</code>
     * @param value The fee to set.
     */
    private void setFee(int value) {
      
      fee_ = value;
    }
    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * If there are no transparent inputs, the fee will be calculable as:
     *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
     * </pre>
     *
     * <code>uint32 fee = 3;</code>
     */
    private void clearFee() {

      fee_ = 0;
    }

    public static final int SPENDS_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> spends_;
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    @java.lang.Override
    public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> getSpendsList() {
      return spends_;
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    public java.util.List<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpendOrBuilder> 
        getSpendsOrBuilderList() {
      return spends_;
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    @java.lang.Override
    public int getSpendsCount() {
      return spends_.size();
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    @java.lang.Override
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend getSpends(int index) {
      return spends_.get(index);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpendOrBuilder getSpendsOrBuilder(
        int index) {
      return spends_.get(index);
    }
    private void ensureSpendsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> tmp = spends_;
      if (!tmp.isModifiable()) {
        spends_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    private void setSpends(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend value) {
      value.getClass();
  ensureSpendsIsMutable();
      spends_.set(index, value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    private void addSpends(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend value) {
      value.getClass();
  ensureSpendsIsMutable();
      spends_.add(value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    private void addSpends(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend value) {
      value.getClass();
  ensureSpendsIsMutable();
      spends_.add(index, value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    private void addAllSpends(
        java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> values) {
      ensureSpendsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, spends_);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    private void clearSpends() {
      spends_ = emptyProtobufList();
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
     */
    private void removeSpends(int index) {
      ensureSpendsIsMutable();
      spends_.remove(index);
    }

    public static final int OUTPUTS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> outputs_;
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    @java.lang.Override
    public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> getOutputsList() {
      return outputs_;
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    public java.util.List<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutputOrBuilder> 
        getOutputsOrBuilderList() {
      return outputs_;
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    @java.lang.Override
    public int getOutputsCount() {
      return outputs_.size();
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    @java.lang.Override
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput getOutputs(int index) {
      return outputs_.get(index);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutputOrBuilder getOutputsOrBuilder(
        int index) {
      return outputs_.get(index);
    }
    private void ensureOutputsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> tmp = outputs_;
      if (!tmp.isModifiable()) {
        outputs_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    private void setOutputs(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput value) {
      value.getClass();
  ensureOutputsIsMutable();
      outputs_.set(index, value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    private void addOutputs(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput value) {
      value.getClass();
  ensureOutputsIsMutable();
      outputs_.add(value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    private void addOutputs(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput value) {
      value.getClass();
  ensureOutputsIsMutable();
      outputs_.add(index, value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    private void addAllOutputs(
        java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> values) {
      ensureOutputsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, outputs_);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    private void clearOutputs() {
      outputs_ = emptyProtobufList();
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
     */
    private void removeOutputs(int index) {
      ensureOutputsIsMutable();
      outputs_.remove(index);
    }

    public static final int ACTIONS_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> actions_;
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    @java.lang.Override
    public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> getActionsList() {
      return actions_;
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    public java.util.List<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardActionOrBuilder> 
        getActionsOrBuilderList() {
      return actions_;
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    @java.lang.Override
    public int getActionsCount() {
      return actions_.size();
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    @java.lang.Override
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction getActions(int index) {
      return actions_.get(index);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardActionOrBuilder getActionsOrBuilder(
        int index) {
      return actions_.get(index);
    }
    private void ensureActionsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> tmp = actions_;
      if (!tmp.isModifiable()) {
        actions_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    private void setActions(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction value) {
      value.getClass();
  ensureActionsIsMutable();
      actions_.set(index, value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    private void addActions(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction value) {
      value.getClass();
  ensureActionsIsMutable();
      actions_.add(value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    private void addActions(
        int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction value) {
      value.getClass();
  ensureActionsIsMutable();
      actions_.add(index, value);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    private void addAllActions(
        java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> values) {
      ensureActionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, actions_);
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    private void clearActions() {
      actions_ = emptyProtobufList();
    }
    /**
     * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
     */
    private void removeActions(int index) {
      ensureActionsIsMutable();
      actions_.remove(index);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * CompactTx contains the minimum information for a wallet to know if this transaction
     * is relevant to it (either pays to it or spends from it) via shielded elements
     * only. This message will not encode a transparent-to-transparent transaction.
     * </pre>
     *
     * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactTx}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx, Builder> implements
        // @@protoc_insertion_point(builder_implements:cash.z.wallet.sdk.rpc.CompactTx)
        cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTxOrBuilder {
      // Construct using cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Index and hash will allow the receiver to call out to chain
       * explorers or other data structures to retrieve more information
       * about this transaction.
       * </pre>
       *
       * <code>uint64 index = 1;</code>
       * @return The index.
       */
      @java.lang.Override
      public long getIndex() {
        return instance.getIndex();
      }
      /**
       * <pre>
       * Index and hash will allow the receiver to call out to chain
       * explorers or other data structures to retrieve more information
       * about this transaction.
       * </pre>
       *
       * <code>uint64 index = 1;</code>
       * @param value The index to set.
       * @return This builder for chaining.
       */
      public Builder setIndex(long value) {
        copyOnWrite();
        instance.setIndex(value);
        return this;
      }
      /**
       * <pre>
       * Index and hash will allow the receiver to call out to chain
       * explorers or other data structures to retrieve more information
       * about this transaction.
       * </pre>
       *
       * <code>uint64 index = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndex() {
        copyOnWrite();
        instance.clearIndex();
        return this;
      }

      /**
       * <pre>
       * the ID (hash) of this transaction, same as in block explorers
       * </pre>
       *
       * <code>bytes hash = 2;</code>
       * @return The hash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getHash() {
        return instance.getHash();
      }
      /**
       * <pre>
       * the ID (hash) of this transaction, same as in block explorers
       * </pre>
       *
       * <code>bytes hash = 2;</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHash(value);
        return this;
      }
      /**
       * <pre>
       * the ID (hash) of this transaction, same as in block explorers
       * </pre>
       *
       * <code>bytes hash = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        copyOnWrite();
        instance.clearHash();
        return this;
      }

      /**
       * <pre>
       * The transaction fee: present if server can provide. In the case of a
       * stateless server and a transaction with transparent inputs, this will be
       * unset because the calculation requires reference to prior transactions.
       * If there are no transparent inputs, the fee will be calculable as:
       *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
       * </pre>
       *
       * <code>uint32 fee = 3;</code>
       * @return The fee.
       */
      @java.lang.Override
      public int getFee() {
        return instance.getFee();
      }
      /**
       * <pre>
       * The transaction fee: present if server can provide. In the case of a
       * stateless server and a transaction with transparent inputs, this will be
       * unset because the calculation requires reference to prior transactions.
       * If there are no transparent inputs, the fee will be calculable as:
       *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
       * </pre>
       *
       * <code>uint32 fee = 3;</code>
       * @param value The fee to set.
       * @return This builder for chaining.
       */
      public Builder setFee(int value) {
        copyOnWrite();
        instance.setFee(value);
        return this;
      }
      /**
       * <pre>
       * The transaction fee: present if server can provide. In the case of a
       * stateless server and a transaction with transparent inputs, this will be
       * unset because the calculation requires reference to prior transactions.
       * If there are no transparent inputs, the fee will be calculable as:
       *    valueBalanceSapling + valueBalanceOrchard + sum(vPubNew) - sum(vPubOld) - sum(tOut)
       * </pre>
       *
       * <code>uint32 fee = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFee() {
        copyOnWrite();
        instance.clearFee();
        return this;
      }

      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      @java.lang.Override
      public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> getSpendsList() {
        return java.util.Collections.unmodifiableList(
            instance.getSpendsList());
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      @java.lang.Override
      public int getSpendsCount() {
        return instance.getSpendsCount();
      }/**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      @java.lang.Override
      public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend getSpends(int index) {
        return instance.getSpends(index);
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder setSpends(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend value) {
        copyOnWrite();
        instance.setSpends(index, value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder setSpends(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.Builder builderForValue) {
        copyOnWrite();
        instance.setSpends(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder addSpends(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend value) {
        copyOnWrite();
        instance.addSpends(value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder addSpends(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend value) {
        copyOnWrite();
        instance.addSpends(index, value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder addSpends(
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.Builder builderForValue) {
        copyOnWrite();
        instance.addSpends(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder addSpends(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.Builder builderForValue) {
        copyOnWrite();
        instance.addSpends(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder addAllSpends(
          java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> values) {
        copyOnWrite();
        instance.addAllSpends(values);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder clearSpends() {
        copyOnWrite();
        instance.clearSpends();
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingSpend spends = 4;</code>
       */
      public Builder removeSpends(int index) {
        copyOnWrite();
        instance.removeSpends(index);
        return this;
      }

      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      @java.lang.Override
      public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> getOutputsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOutputsList());
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      @java.lang.Override
      public int getOutputsCount() {
        return instance.getOutputsCount();
      }/**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      @java.lang.Override
      public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput getOutputs(int index) {
        return instance.getOutputs(index);
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder setOutputs(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput value) {
        copyOnWrite();
        instance.setOutputs(index, value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder setOutputs(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput.Builder builderForValue) {
        copyOnWrite();
        instance.setOutputs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder addOutputs(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput value) {
        copyOnWrite();
        instance.addOutputs(value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder addOutputs(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput value) {
        copyOnWrite();
        instance.addOutputs(index, value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder addOutputs(
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput.Builder builderForValue) {
        copyOnWrite();
        instance.addOutputs(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder addOutputs(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput.Builder builderForValue) {
        copyOnWrite();
        instance.addOutputs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder addAllOutputs(
          java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> values) {
        copyOnWrite();
        instance.addAllOutputs(values);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder clearOutputs() {
        copyOnWrite();
        instance.clearOutputs();
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactSaplingOutput outputs = 5;</code>
       */
      public Builder removeOutputs(int index) {
        copyOnWrite();
        instance.removeOutputs(index);
        return this;
      }

      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      @java.lang.Override
      public java.util.List<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> getActionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getActionsList());
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      @java.lang.Override
      public int getActionsCount() {
        return instance.getActionsCount();
      }/**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      @java.lang.Override
      public cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction getActions(int index) {
        return instance.getActions(index);
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder setActions(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction value) {
        copyOnWrite();
        instance.setActions(index, value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder setActions(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.Builder builderForValue) {
        copyOnWrite();
        instance.setActions(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder addActions(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction value) {
        copyOnWrite();
        instance.addActions(value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder addActions(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction value) {
        copyOnWrite();
        instance.addActions(index, value);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder addActions(
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.Builder builderForValue) {
        copyOnWrite();
        instance.addActions(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder addActions(
          int index, cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.Builder builderForValue) {
        copyOnWrite();
        instance.addActions(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder addAllActions(
          java.lang.Iterable<? extends cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> values) {
        copyOnWrite();
        instance.addAllActions(values);
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder clearActions() {
        copyOnWrite();
        instance.clearActions();
        return this;
      }
      /**
       * <code>repeated .cash.z.wallet.sdk.rpc.CompactOrchardAction actions = 6;</code>
       */
      public Builder removeActions(int index) {
        copyOnWrite();
        instance.removeActions(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cash.z.wallet.sdk.rpc.CompactTx)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "index_",
              "hash_",
              "fee_",
              "spends_",
              cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.class,
              "outputs_",
              cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput.class,
              "actions_",
              cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.class,
            };
            java.lang.String info =
                "\u0000\u0006\u0000\u0000\u0001\u0006\u0006\u0000\u0003\u0000\u0001\u0003\u0002\n" +
                "\u0003\u000b\u0004\u001b\u0005\u001b\u0006\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx> parser = PARSER;
          if (parser == null) {
            synchronized (cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cash.z.wallet.sdk.rpc.CompactTx)
    private static final cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx DEFAULT_INSTANCE;
    static {
      CompactTx defaultInstance = new CompactTx();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompactTx.class, defaultInstance);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactTx getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactTx> PARSER;

    public static com.google.protobuf.Parser<CompactTx> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactSaplingSpendOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cash.z.wallet.sdk.rpc.CompactSaplingSpend)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * nullifier (see the Zcash protocol specification)
     * </pre>
     *
     * <code>bytes nf = 1;</code>
     * @return The nf.
     */
    com.google.protobuf.ByteString getNf();
  }
  /**
   * <pre>
   * CompactSaplingSpend is a Sapling Spend Description as described in 7.3 of the Zcash
   * protocol specification.
   * </pre>
   *
   * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactSaplingSpend}
   */
  public  static final class CompactSaplingSpend extends
      com.google.protobuf.GeneratedMessageLite<
          CompactSaplingSpend, CompactSaplingSpend.Builder> implements
      // @@protoc_insertion_point(message_implements:cash.z.wallet.sdk.rpc.CompactSaplingSpend)
      CompactSaplingSpendOrBuilder {
    private CompactSaplingSpend() {
      nf_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int NF_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString nf_;
    /**
     * <pre>
     * nullifier (see the Zcash protocol specification)
     * </pre>
     *
     * <code>bytes nf = 1;</code>
     * @return The nf.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNf() {
      return nf_;
    }
    /**
     * <pre>
     * nullifier (see the Zcash protocol specification)
     * </pre>
     *
     * <code>bytes nf = 1;</code>
     * @param value The nf to set.
     */
    private void setNf(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      nf_ = value;
    }
    /**
     * <pre>
     * nullifier (see the Zcash protocol specification)
     * </pre>
     *
     * <code>bytes nf = 1;</code>
     */
    private void clearNf() {

      nf_ = getDefaultInstance().getNf();
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * CompactSaplingSpend is a Sapling Spend Description as described in 7.3 of the Zcash
     * protocol specification.
     * </pre>
     *
     * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactSaplingSpend}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend, Builder> implements
        // @@protoc_insertion_point(builder_implements:cash.z.wallet.sdk.rpc.CompactSaplingSpend)
        cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpendOrBuilder {
      // Construct using cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * nullifier (see the Zcash protocol specification)
       * </pre>
       *
       * <code>bytes nf = 1;</code>
       * @return The nf.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getNf() {
        return instance.getNf();
      }
      /**
       * <pre>
       * nullifier (see the Zcash protocol specification)
       * </pre>
       *
       * <code>bytes nf = 1;</code>
       * @param value The nf to set.
       * @return This builder for chaining.
       */
      public Builder setNf(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNf(value);
        return this;
      }
      /**
       * <pre>
       * nullifier (see the Zcash protocol specification)
       * </pre>
       *
       * <code>bytes nf = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNf() {
        copyOnWrite();
        instance.clearNf();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cash.z.wallet.sdk.rpc.CompactSaplingSpend)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "nf_",
            };
            java.lang.String info =
                "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\n";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend> parser = PARSER;
          if (parser == null) {
            synchronized (cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cash.z.wallet.sdk.rpc.CompactSaplingSpend)
    private static final cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend DEFAULT_INSTANCE;
    static {
      CompactSaplingSpend defaultInstance = new CompactSaplingSpend();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompactSaplingSpend.class, defaultInstance);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingSpend getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactSaplingSpend> PARSER;

    public static com.google.protobuf.Parser<CompactSaplingSpend> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactSaplingOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cash.z.wallet.sdk.rpc.CompactSaplingOutput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * note commitment u-coordinate
     * </pre>
     *
     * <code>bytes cmu = 1;</code>
     * @return The cmu.
     */
    com.google.protobuf.ByteString getCmu();

    /**
     * <pre>
     * ephemeral public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 2;</code>
     * @return The ephemeralKey.
     */
    com.google.protobuf.ByteString getEphemeralKey();

    /**
     * <pre>
     * first 52 bytes of ciphertext
     * </pre>
     *
     * <code>bytes ciphertext = 3;</code>
     * @return The ciphertext.
     */
    com.google.protobuf.ByteString getCiphertext();
  }
  /**
   * <pre>
   * output encodes the `cmu` field, `ephemeralKey` field, and a 52-byte prefix of the
   * `encCiphertext` field of a Sapling Output Description. These fields are described in
   * section 7.4 of the Zcash protocol spec:
   * https://zips.z.cash/protocol/protocol.pdf#outputencodingandconsensus
   * Total size is 116 bytes.
   * </pre>
   *
   * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactSaplingOutput}
   */
  public  static final class CompactSaplingOutput extends
      com.google.protobuf.GeneratedMessageLite<
          CompactSaplingOutput, CompactSaplingOutput.Builder> implements
      // @@protoc_insertion_point(message_implements:cash.z.wallet.sdk.rpc.CompactSaplingOutput)
      CompactSaplingOutputOrBuilder {
    private CompactSaplingOutput() {
      cmu_ = com.google.protobuf.ByteString.EMPTY;
      ephemeralKey_ = com.google.protobuf.ByteString.EMPTY;
      ciphertext_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int CMU_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString cmu_;
    /**
     * <pre>
     * note commitment u-coordinate
     * </pre>
     *
     * <code>bytes cmu = 1;</code>
     * @return The cmu.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCmu() {
      return cmu_;
    }
    /**
     * <pre>
     * note commitment u-coordinate
     * </pre>
     *
     * <code>bytes cmu = 1;</code>
     * @param value The cmu to set.
     */
    private void setCmu(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      cmu_ = value;
    }
    /**
     * <pre>
     * note commitment u-coordinate
     * </pre>
     *
     * <code>bytes cmu = 1;</code>
     */
    private void clearCmu() {

      cmu_ = getDefaultInstance().getCmu();
    }

    public static final int EPHEMERALKEY_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString ephemeralKey_;
    /**
     * <pre>
     * ephemeral public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 2;</code>
     * @return The ephemeralKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getEphemeralKey() {
      return ephemeralKey_;
    }
    /**
     * <pre>
     * ephemeral public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 2;</code>
     * @param value The ephemeralKey to set.
     */
    private void setEphemeralKey(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      ephemeralKey_ = value;
    }
    /**
     * <pre>
     * ephemeral public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 2;</code>
     */
    private void clearEphemeralKey() {

      ephemeralKey_ = getDefaultInstance().getEphemeralKey();
    }

    public static final int CIPHERTEXT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString ciphertext_;
    /**
     * <pre>
     * first 52 bytes of ciphertext
     * </pre>
     *
     * <code>bytes ciphertext = 3;</code>
     * @return The ciphertext.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCiphertext() {
      return ciphertext_;
    }
    /**
     * <pre>
     * first 52 bytes of ciphertext
     * </pre>
     *
     * <code>bytes ciphertext = 3;</code>
     * @param value The ciphertext to set.
     */
    private void setCiphertext(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      ciphertext_ = value;
    }
    /**
     * <pre>
     * first 52 bytes of ciphertext
     * </pre>
     *
     * <code>bytes ciphertext = 3;</code>
     */
    private void clearCiphertext() {

      ciphertext_ = getDefaultInstance().getCiphertext();
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * output encodes the `cmu` field, `ephemeralKey` field, and a 52-byte prefix of the
     * `encCiphertext` field of a Sapling Output Description. These fields are described in
     * section 7.4 of the Zcash protocol spec:
     * https://zips.z.cash/protocol/protocol.pdf#outputencodingandconsensus
     * Total size is 116 bytes.
     * </pre>
     *
     * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactSaplingOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput, Builder> implements
        // @@protoc_insertion_point(builder_implements:cash.z.wallet.sdk.rpc.CompactSaplingOutput)
        cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutputOrBuilder {
      // Construct using cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * note commitment u-coordinate
       * </pre>
       *
       * <code>bytes cmu = 1;</code>
       * @return The cmu.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCmu() {
        return instance.getCmu();
      }
      /**
       * <pre>
       * note commitment u-coordinate
       * </pre>
       *
       * <code>bytes cmu = 1;</code>
       * @param value The cmu to set.
       * @return This builder for chaining.
       */
      public Builder setCmu(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCmu(value);
        return this;
      }
      /**
       * <pre>
       * note commitment u-coordinate
       * </pre>
       *
       * <code>bytes cmu = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmu() {
        copyOnWrite();
        instance.clearCmu();
        return this;
      }

      /**
       * <pre>
       * ephemeral public key
       * </pre>
       *
       * <code>bytes ephemeralKey = 2;</code>
       * @return The ephemeralKey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getEphemeralKey() {
        return instance.getEphemeralKey();
      }
      /**
       * <pre>
       * ephemeral public key
       * </pre>
       *
       * <code>bytes ephemeralKey = 2;</code>
       * @param value The ephemeralKey to set.
       * @return This builder for chaining.
       */
      public Builder setEphemeralKey(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setEphemeralKey(value);
        return this;
      }
      /**
       * <pre>
       * ephemeral public key
       * </pre>
       *
       * <code>bytes ephemeralKey = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEphemeralKey() {
        copyOnWrite();
        instance.clearEphemeralKey();
        return this;
      }

      /**
       * <pre>
       * first 52 bytes of ciphertext
       * </pre>
       *
       * <code>bytes ciphertext = 3;</code>
       * @return The ciphertext.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCiphertext() {
        return instance.getCiphertext();
      }
      /**
       * <pre>
       * first 52 bytes of ciphertext
       * </pre>
       *
       * <code>bytes ciphertext = 3;</code>
       * @param value The ciphertext to set.
       * @return This builder for chaining.
       */
      public Builder setCiphertext(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCiphertext(value);
        return this;
      }
      /**
       * <pre>
       * first 52 bytes of ciphertext
       * </pre>
       *
       * <code>bytes ciphertext = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearCiphertext() {
        copyOnWrite();
        instance.clearCiphertext();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cash.z.wallet.sdk.rpc.CompactSaplingOutput)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "cmu_",
              "ephemeralKey_",
              "ciphertext_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\n\u0002\n\u0003" +
                "\n";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput> parser = PARSER;
          if (parser == null) {
            synchronized (cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cash.z.wallet.sdk.rpc.CompactSaplingOutput)
    private static final cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput DEFAULT_INSTANCE;
    static {
      CompactSaplingOutput defaultInstance = new CompactSaplingOutput();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompactSaplingOutput.class, defaultInstance);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactSaplingOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactSaplingOutput> PARSER;

    public static com.google.protobuf.Parser<CompactSaplingOutput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactOrchardActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cash.z.wallet.sdk.rpc.CompactOrchardAction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * [32] The nullifier of the input note
     * </pre>
     *
     * <code>bytes nullifier = 1;</code>
     * @return The nullifier.
     */
    com.google.protobuf.ByteString getNullifier();

    /**
     * <pre>
     * [32] The x-coordinate of the note commitment for the output note
     * </pre>
     *
     * <code>bytes cmx = 2;</code>
     * @return The cmx.
     */
    com.google.protobuf.ByteString getCmx();

    /**
     * <pre>
     * [32] An encoding of an ephemeral Pallas public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 3;</code>
     * @return The ephemeralKey.
     */
    com.google.protobuf.ByteString getEphemeralKey();

    /**
     * <pre>
     * [52] The first 52 bytes of the encCiphertext field
     * </pre>
     *
     * <code>bytes ciphertext = 4;</code>
     * @return The ciphertext.
     */
    com.google.protobuf.ByteString getCiphertext();
  }
  /**
   * <pre>
   * https://github.com/zcash/zips/blob/main/zip-0225.rst#orchard-action-description-orchardaction
   * (but not all fields are needed)
   * </pre>
   *
   * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactOrchardAction}
   */
  public  static final class CompactOrchardAction extends
      com.google.protobuf.GeneratedMessageLite<
          CompactOrchardAction, CompactOrchardAction.Builder> implements
      // @@protoc_insertion_point(message_implements:cash.z.wallet.sdk.rpc.CompactOrchardAction)
      CompactOrchardActionOrBuilder {
    private CompactOrchardAction() {
      nullifier_ = com.google.protobuf.ByteString.EMPTY;
      cmx_ = com.google.protobuf.ByteString.EMPTY;
      ephemeralKey_ = com.google.protobuf.ByteString.EMPTY;
      ciphertext_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int NULLIFIER_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString nullifier_;
    /**
     * <pre>
     * [32] The nullifier of the input note
     * </pre>
     *
     * <code>bytes nullifier = 1;</code>
     * @return The nullifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNullifier() {
      return nullifier_;
    }
    /**
     * <pre>
     * [32] The nullifier of the input note
     * </pre>
     *
     * <code>bytes nullifier = 1;</code>
     * @param value The nullifier to set.
     */
    private void setNullifier(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      nullifier_ = value;
    }
    /**
     * <pre>
     * [32] The nullifier of the input note
     * </pre>
     *
     * <code>bytes nullifier = 1;</code>
     */
    private void clearNullifier() {

      nullifier_ = getDefaultInstance().getNullifier();
    }

    public static final int CMX_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString cmx_;
    /**
     * <pre>
     * [32] The x-coordinate of the note commitment for the output note
     * </pre>
     *
     * <code>bytes cmx = 2;</code>
     * @return The cmx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCmx() {
      return cmx_;
    }
    /**
     * <pre>
     * [32] The x-coordinate of the note commitment for the output note
     * </pre>
     *
     * <code>bytes cmx = 2;</code>
     * @param value The cmx to set.
     */
    private void setCmx(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      cmx_ = value;
    }
    /**
     * <pre>
     * [32] The x-coordinate of the note commitment for the output note
     * </pre>
     *
     * <code>bytes cmx = 2;</code>
     */
    private void clearCmx() {

      cmx_ = getDefaultInstance().getCmx();
    }

    public static final int EPHEMERALKEY_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString ephemeralKey_;
    /**
     * <pre>
     * [32] An encoding of an ephemeral Pallas public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 3;</code>
     * @return The ephemeralKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getEphemeralKey() {
      return ephemeralKey_;
    }
    /**
     * <pre>
     * [32] An encoding of an ephemeral Pallas public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 3;</code>
     * @param value The ephemeralKey to set.
     */
    private void setEphemeralKey(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      ephemeralKey_ = value;
    }
    /**
     * <pre>
     * [32] An encoding of an ephemeral Pallas public key
     * </pre>
     *
     * <code>bytes ephemeralKey = 3;</code>
     */
    private void clearEphemeralKey() {

      ephemeralKey_ = getDefaultInstance().getEphemeralKey();
    }

    public static final int CIPHERTEXT_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString ciphertext_;
    /**
     * <pre>
     * [52] The first 52 bytes of the encCiphertext field
     * </pre>
     *
     * <code>bytes ciphertext = 4;</code>
     * @return The ciphertext.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCiphertext() {
      return ciphertext_;
    }
    /**
     * <pre>
     * [52] The first 52 bytes of the encCiphertext field
     * </pre>
     *
     * <code>bytes ciphertext = 4;</code>
     * @param value The ciphertext to set.
     */
    private void setCiphertext(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      ciphertext_ = value;
    }
    /**
     * <pre>
     * [52] The first 52 bytes of the encCiphertext field
     * </pre>
     *
     * <code>bytes ciphertext = 4;</code>
     */
    private void clearCiphertext() {

      ciphertext_ = getDefaultInstance().getCiphertext();
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * https://github.com/zcash/zips/blob/main/zip-0225.rst#orchard-action-description-orchardaction
     * (but not all fields are needed)
     * </pre>
     *
     * Protobuf type {@code cash.z.wallet.sdk.rpc.CompactOrchardAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction, Builder> implements
        // @@protoc_insertion_point(builder_implements:cash.z.wallet.sdk.rpc.CompactOrchardAction)
        cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardActionOrBuilder {
      // Construct using cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * [32] The nullifier of the input note
       * </pre>
       *
       * <code>bytes nullifier = 1;</code>
       * @return The nullifier.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getNullifier() {
        return instance.getNullifier();
      }
      /**
       * <pre>
       * [32] The nullifier of the input note
       * </pre>
       *
       * <code>bytes nullifier = 1;</code>
       * @param value The nullifier to set.
       * @return This builder for chaining.
       */
      public Builder setNullifier(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNullifier(value);
        return this;
      }
      /**
       * <pre>
       * [32] The nullifier of the input note
       * </pre>
       *
       * <code>bytes nullifier = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNullifier() {
        copyOnWrite();
        instance.clearNullifier();
        return this;
      }

      /**
       * <pre>
       * [32] The x-coordinate of the note commitment for the output note
       * </pre>
       *
       * <code>bytes cmx = 2;</code>
       * @return The cmx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCmx() {
        return instance.getCmx();
      }
      /**
       * <pre>
       * [32] The x-coordinate of the note commitment for the output note
       * </pre>
       *
       * <code>bytes cmx = 2;</code>
       * @param value The cmx to set.
       * @return This builder for chaining.
       */
      public Builder setCmx(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCmx(value);
        return this;
      }
      /**
       * <pre>
       * [32] The x-coordinate of the note commitment for the output note
       * </pre>
       *
       * <code>bytes cmx = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmx() {
        copyOnWrite();
        instance.clearCmx();
        return this;
      }

      /**
       * <pre>
       * [32] An encoding of an ephemeral Pallas public key
       * </pre>
       *
       * <code>bytes ephemeralKey = 3;</code>
       * @return The ephemeralKey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getEphemeralKey() {
        return instance.getEphemeralKey();
      }
      /**
       * <pre>
       * [32] An encoding of an ephemeral Pallas public key
       * </pre>
       *
       * <code>bytes ephemeralKey = 3;</code>
       * @param value The ephemeralKey to set.
       * @return This builder for chaining.
       */
      public Builder setEphemeralKey(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setEphemeralKey(value);
        return this;
      }
      /**
       * <pre>
       * [32] An encoding of an ephemeral Pallas public key
       * </pre>
       *
       * <code>bytes ephemeralKey = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEphemeralKey() {
        copyOnWrite();
        instance.clearEphemeralKey();
        return this;
      }

      /**
       * <pre>
       * [52] The first 52 bytes of the encCiphertext field
       * </pre>
       *
       * <code>bytes ciphertext = 4;</code>
       * @return The ciphertext.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCiphertext() {
        return instance.getCiphertext();
      }
      /**
       * <pre>
       * [52] The first 52 bytes of the encCiphertext field
       * </pre>
       *
       * <code>bytes ciphertext = 4;</code>
       * @param value The ciphertext to set.
       * @return This builder for chaining.
       */
      public Builder setCiphertext(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCiphertext(value);
        return this;
      }
      /**
       * <pre>
       * [52] The first 52 bytes of the encCiphertext field
       * </pre>
       *
       * <code>bytes ciphertext = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCiphertext() {
        copyOnWrite();
        instance.clearCiphertext();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cash.z.wallet.sdk.rpc.CompactOrchardAction)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "nullifier_",
              "cmx_",
              "ephemeralKey_",
              "ciphertext_",
            };
            java.lang.String info =
                "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\n\u0002\n\u0003" +
                "\n\u0004\n";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction> parser = PARSER;
          if (parser == null) {
            synchronized (cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cash.z.wallet.sdk.rpc.CompactOrchardAction)
    private static final cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction DEFAULT_INSTANCE;
    static {
      CompactOrchardAction defaultInstance = new CompactOrchardAction();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompactOrchardAction.class, defaultInstance);
    }

    public static cash.z.wallet.sdk.internal.rpc.CompactFormats.CompactOrchardAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactOrchardAction> PARSER;

    public static com.google.protobuf.Parser<CompactOrchardAction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
